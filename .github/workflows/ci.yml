name: CI

on:
  push:
  pull_request:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run build
        run: pnpm turbo run build
      
      - name: Run lint
        run: pnpm turbo run lint
      
      - name: Run unit tests with coverage
        run: pnpm turbo run test -- --coverage --run
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./packages
          fail_ci_if_error: false
          verbose: true

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run type check
        run: pnpm turbo run typecheck

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build all packages
        run: pnpm build
      
      - name: Install Claude Code CLI
        run: pnpm install -g @anthropic-ai/claude-code
      
      - name: Start all test servers
        run: |
          ./test/integration/setup-test-servers.sh --ci
          sleep 15

      - name: Run Integration tests
        run: |
          cd test/integration
          pnpm test:integration
      
      - name: Run E2E test with Claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cd test
          # Run test with timeout and capture output
          timeout 60 ./test.sh simple-log-passthrough.json > test-output.txt 2>&1 || true
          
          echo "Test output:"
          cat test-output.txt
          
          # Check for successful fetch of Civic docs
          # Look for JSON with type:"user" containing tool_result with "Civic Auth"
          if grep -q '"type":"user"' test-output.txt && grep -q '"type":"tool_result"' test-output.txt && grep -q "Civic Auth" test-output.txt; then
            echo "✅ Integration test passed - found expected tool_result with Civic content"
            exit 0
          else
            echo "❌ Integration test failed - expected content not found"
            echo "Looking for JSON with type:\"user\" containing type:\"tool_result\" and 'Civic Auth'"
            exit 1
          fi
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs
          path: |
            test/test-output.txt
            packages/*/err.log
          retention-days: 7

      - name: Cleanup background processes
        if: always()
        run: |
          # Use the PIDs file created by setup script
          PIDS_FILE="/tmp/mcp-test-servers.pids"
          
          if [ -f $PIDS_FILE ]; then
            echo "Cleaning up processes from PIDs file..."
            while read pid; do
              if ps -p $pid > /dev/null 2>&1; then
                # Kill the process and all its children
                pkill -P $pid 2>/dev/null || true
                kill $pid 2>/dev/null || true
                echo "Stopped process $pid and its children"
              fi
            done < $PIDS_FILE
            rm $PIDS_FILE
          fi
          
          # Also try to clean up any orphaned node processes on test ports
          echo "Cleaning up any orphaned processes on test ports..."
          for port in 33000 33007 33008 33100 34000 34008 34100 34200; do
            lsof -ti:$port | xargs kill -9 2>/dev/null || true
          done
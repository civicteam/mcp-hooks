name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run build
        run: pnpm turbo run build
      
      - name: Run lint
        run: pnpm turbo run lint
      
      - name: Run tests with coverage
        run: pnpm turbo run test -- --coverage --run
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./packages
          fail_ci_if_error: false
          verbose: true

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run type check
        run: pnpm turbo run typecheck

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build all packages
        run: pnpm build
      
      - name: Install Claude Code CLI
        run: pnpm install -g @anthropic-ai/claude-code
      
      - name: Start fetch-docs server
        run: |
          cd packages/fetch-docs
          PORT=33003 pnpm dev &
          echo "FETCH_DOCS_PID=$!" >> $GITHUB_ENV
          sleep 5
      
      - name: Start simple-log-hook
        run: |
          cd packages/simple-log-hook
          PORT=33006 pnpm dev &
          echo "SIMPLE_LOG_PID=$!" >> $GITHUB_ENV
          sleep 5
      
      - name: Run integration test
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cd test
          chmod +x test.sh
          # Run test with timeout and capture output
          timeout 60 ./test.sh simple-log-passthrough.json > test-output.txt 2>&1 || true
          
          echo "Test output:"
          cat test-output.txt
          
          # Check for successful fetch of Civic docs
          # Look for JSON with type: "user" containing tool_result with "Getting Started with Civic"
          if grep -q '"type": "user"' test-output.txt && grep -q '"type": "tool_result"' test-output.txt && grep -q "Civic Docs home page" test-output.txt; then
            echo "✅ Integration test passed - found expected tool_result with Civic content"
            exit 0
          else
            echo "❌ Integration test failed - expected content not found"
            echo "Looking for JSON with type: \"user\" containing type: \"tool_result\" and 'Getting Started with Civic'"
            exit 1
          fi
      
      - name: Cleanup background processes
        if: always()
        run: |
          if [ ! -z "$FETCH_DOCS_PID" ]; then kill $FETCH_DOCS_PID || true; fi
          if [ ! -z "$SIMPLE_LOG_PID" ]; then kill $SIMPLE_LOG_PID || true; fi